{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\naomi\\\\Downloads\\\\web_react_project\\\\frontend\\\\src\\\\components\\\\AddPackages.js\";\nimport React, { Component } from \"react\"; // This will require to npm install axios\n\nimport axios from 'axios';\nimport './navbar.css';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AddPackages extends Component {\n  // This is the constructor that stores the data.\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.error('Error', error));\n    };\n\n    this.onChangePackageName = this.onChangePackageName.bind(this);\n    this.onChangePackageLat = this.onChangePackageLat.bind(this);\n    this.onChangePackageLong = this.onChangePackageLong.bind(this);\n    this.onChangePackageAddress = this.onChangePackageAddress.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      receiver_name: \"\",\n      latitude: 0.0,\n      longitude: 0.0,\n      address: \"\"\n    };\n  } // These methods will update the state properties.\n\n\n  onChangePackageName(e) {\n    this.setState({\n      receiver_name: e.target.value\n    });\n  }\n\n  onChangePackageLat(e) {\n    this.setState({\n      latitude: e.target.value\n    });\n  }\n\n  onChangePackageLong(e) {\n    this.setState({\n      longitude: e.target.value\n    });\n  }\n\n  onChangePackageAddress(e) {\n    this.setState({\n      address: e.target.value\n    });\n  } // GeoConversion() {\n  //     var geocoder = new google.maps.Geocoder();\n  //     var address = this.state.address;\n  //     geocoder.geocode( {'address': address}, function(results, status) {\n  //         if (status == google.maps.GeocoderStatus.OK) {\n  //             var latitude = results[0].geometry.location.lat();\n  //             var longitude = results[0].geometry.location.lng();\n  //             alert(latitude);\n  //         }\n  //         });\n  //         return\n  // }\n\n\n  // This function will handle the submission.\n  onSubmit(e) {\n    e.preventDefault(); ////////attempt to convert address to lat and long\n    //     var geocoder = new google.maps.Geocoder();\n    //     var address = this.state.address;\n    //    // var address_url = `https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=AIzaSyDBGo5pGarCnOBYo342QaXwZMEpuph4eOU`;\n    //     <script type=\"text/javascript\" src={\"http://maps.google.com/maps/api/js?sensor=false\"}>\n    //         </script>\n    //     geocoder.geocode( {'address': address}, function(results, status) {\n    //     if (status == google.maps.GeocoderStatus.OK) {\n    //         var latitude = results[0].geometry.location.lat();\n    //         var longitude = results[0].geometry.location.lng();\n    //         alert(latitude);\n    //     }\n    //     }); \n    // When post request is sent to the create url, axios will add a new record(newperson) to the database.\n\n    const newpackage = {\n      //   person_name: this.state.person_name,\n      //   person_position: this.state.person_position,\n      //   person_level: this.state.person_level,\n      \"receiver_name\": this.state.receiver_name,\n      \"latitude\": this.state.latitude,\n      \"longitude\": this.state.longitude,\n      \"address\": this.state.adress\n    };\n    axios.post(\"http://localhost:4000/app/grouporders\", newpackage).then(res => console.log(res.data)).catch(error => console.log(error)); // We will empty the state after posting the data to the database\n\n    this.setState({\n      //   person_name: \"\",\n      //   person_position: \"\",\n      //   person_level: \"\",\n      receiver_name: \"\",\n      latitude: 0.0,\n      longitude: 0.0,\n      address: \"\"\n    });\n  } // This following section will display the form that takes the input from the user.\n\n\n  render() {\n    /*#__PURE__*/\n    _jsxDEV(\"h1\", {\n      children: \"Prints\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Reicever Name: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: this.state.receiver_name,\n            onChange: this.onChangePackageName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n            value: this.state.address,\n            onChange: this.handleChange,\n            onSelect: this.handleSelect,\n            children: ({\n              getInputProps,\n              suggestions,\n              getSuggestionItemProps,\n              loading\n            }) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                  placeholder: 'Search Places ...',\n                  className: 'location-search-input'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"autocomplete-dropdown-container\",\n                children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Loading...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 27\n                }, this), suggestions.map(suggestion => {\n                  const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n                  const style = suggestion.active ? {\n                    backgroundColor: '#fafafa',\n                    cursor: 'pointer'\n                  } : {\n                    backgroundColor: '#ffffff',\n                    cursor: 'pointer'\n                  };\n                  return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                      className,\n                      style\n                    }),\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: suggestion.description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 188,\n                      columnNumber: 21\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 19\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Register\",\n            className: \"btn btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/Users/naomi/Downloads/web_react_project/frontend/src/components/AddPackages.js"],"names":["React","Component","axios","PlacesAutocomplete","geocodeByAddress","getLatLng","AddPackages","constructor","props","handleChange","address","setState","handleSelect","then","results","latLng","console","log","catch","error","onChangePackageName","bind","onChangePackageLat","onChangePackageLong","onChangePackageAddress","onSubmit","state","receiver_name","latitude","longitude","e","target","value","preventDefault","newpackage","adress","post","res","data","render","marginTop","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n// This will require to npm install axios\r\nimport axios from 'axios';\r\nimport './navbar.css';\r\n\r\n\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng,\r\n  } from 'react-places-autocomplete';\r\n   \r\n\r\nexport default class AddPackages extends Component {\r\n  // This is the constructor that stores the data.\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onChangePackageName = this.onChangePackageName.bind(this);\r\n    this.onChangePackageLat = this.onChangePackageLat.bind(this);\r\n    this.onChangePackageLong = this.onChangePackageLong.bind(this);\r\n    this.onChangePackageAddress = this.onChangePackageAddress.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n    receiver_name: \"\",\r\n    latitude: 0.0,\r\n    longitude: 0.0,\r\n    address: \"\"\r\n    };\r\n  }\r\n\r\n  // These methods will update the state properties.\r\n  onChangePackageName(e) {\r\n    this.setState({\r\n        receiver_name: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangePackageLat(e) {\r\n    this.setState({\r\n        latitude: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangePackageLong(e) {\r\n    this.setState({\r\n        longitude: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangePackageAddress(e) {\r\n    this.setState({\r\n        address: e.target.value,\r\n    });\r\n  }\r\n\r\n  // GeoConversion() {\r\n\r\n//     var geocoder = new google.maps.Geocoder();\r\n//     var address = this.state.address;\r\n\r\n//     geocoder.geocode( {'address': address}, function(results, status) {\r\n\r\n//         if (status == google.maps.GeocoderStatus.OK) {\r\n//             var latitude = results[0].geometry.location.lat();\r\n//             var longitude = results[0].geometry.location.lng();\r\n//             alert(latitude);\r\n//         }\r\n//         });\r\n\r\n//         return\r\n\r\n// }\r\nhandleChange = address => {\r\n    this.setState({ address });\r\n  };\r\n \r\n  handleSelect = address => {\r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => console.log('Success', latLng))\r\n      .catch(error => console.error('Error', error));\r\n\r\n\r\n  };\r\n\r\n\r\n// This function will handle the submission.\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    ////////attempt to convert address to lat and long\r\n//     var geocoder = new google.maps.Geocoder();\r\n//     var address = this.state.address;\r\n//    // var address_url = `https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=AIzaSyDBGo5pGarCnOBYo342QaXwZMEpuph4eOU`;\r\n\r\n    \r\n//     <script type=\"text/javascript\" src={\"http://maps.google.com/maps/api/js?sensor=false\"}>\r\n\r\n//         </script>\r\n\r\n//     geocoder.geocode( {'address': address}, function(results, status) {\r\n\r\n//     if (status == google.maps.GeocoderStatus.OK) {\r\n//         var latitude = results[0].geometry.location.lat();\r\n//         var longitude = results[0].geometry.location.lng();\r\n//         alert(latitude);\r\n//     }\r\n//     }); \r\n\r\n\r\n    \r\n\r\n    // When post request is sent to the create url, axios will add a new record(newperson) to the database.\r\n    const newpackage = {\r\n    //   person_name: this.state.person_name,\r\n    //   person_position: this.state.person_position,\r\n    //   person_level: this.state.person_level,\r\n    \"receiver_name\": this.state.receiver_name,\r\n    \"latitude\": this.state.latitude,\r\n    \"longitude\": this.state.longitude,\r\n    \"address\": this.state.adress\r\n    };\r\n\r\n    axios\r\n       .post(\"http://localhost:4000/app/grouporders\", newpackage)\r\n      .then((res) => console.log(res.data))\r\n      .catch((error) => console.log(error));\r\n    // We will empty the state after posting the data to the database\r\n    this.setState({\r\n    //   person_name: \"\",\r\n    //   person_position: \"\",\r\n    //   person_level: \"\",\r\n    receiver_name: \"\",\r\n    latitude: 0.0,\r\n    longitude: 0.0,\r\n    address: \"\"\r\n    });\r\n  }\r\n\r\n  // This following section will display the form that takes the input from the user.\r\n  render() {\r\n      <h1>Prints</h1>\r\n    return (\r\n      <div style={{ marginTop: 20 }}>\r\n        <h3>Register</h3>\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Reicever Name: </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n            value={this.state.receiver_name}\r\n              onChange={this.onChangePackageName}\r\n            />\r\n          </div>\r\n        <div className=\"form-group\">\r\n          <PlacesAutocomplete\r\n        value={this.state.address}\r\n        onChange={this.handleChange}\r\n        onSelect={this.handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <input\r\n              {...getInputProps({\r\n                placeholder: 'Search Places ...',\r\n                className: 'location-search-input',\r\n              })}\r\n            />\r\n            <div className=\"autocomplete-dropdown-container\">\r\n              {loading && <div>Loading...</div>}\r\n              {suggestions.map(suggestion => {\r\n                const className = suggestion.active\r\n                  ? 'suggestion-item--active'\r\n                  : 'suggestion-item';\r\n                // inline style for demonstration purpose\r\n                const style = suggestion.active\r\n                  ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                return (\r\n                  <div\r\n                    {...getSuggestionItemProps(suggestion, {\r\n                      className,\r\n                      style,\r\n                    })}\r\n                  >\r\n                    <span>{suggestion.description}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n      </div>\r\n            {/* <label>Latitude: </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              value={this.state.latitude}\r\n              onChange={this.onChangePackageLat}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Longitude: </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              value={this.state.longitude}\r\n              onChange={this.onChangePackageLong}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Address: </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              value={this.state.address}\r\n              onChange={this.onChangePackageAddress}\r\n            />\r\n          </div> */}\r\n         \r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"submit\"\r\n              value=\"Register\"\r\n              className=\"btn btn-primary\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}