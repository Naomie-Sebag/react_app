{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\naomi\\\\Downloads\\\\web_react_project\\\\frontend\\\\src\\\\components\\\\ChatMain.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport events from '../events';\nimport ChatPage from './ChatsPage/ChatPage';\nimport LoginPage from './LoginPage'; // ***** it will used in dev mode\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socketUrl = 'http://localhost/';\nexport class Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      socket: null,\n      user: null,\n      users: {},\n      pChats: []\n    };\n\n    this.initSocket = () => {\n      let socket = io(socketUrl);\n      this.setState({\n        socket\n      });\n      socket.on('connect', () => console.log('Connected'));\n      socket.on(events.LOGOUT, this.setUsers(false));\n      socket.on(events.NEW_USER, this.setUsers(true));\n    };\n\n    this.setUser = user => {\n      let {\n        socket\n      } = this.state;\n      this.setState({\n        user\n      });\n      socket.emit(events.NEW_USER, user);\n    };\n\n    this.setUsers = isNewUsers => ({\n      newUsers,\n      outUser\n    }) => {\n      let {\n        user,\n        pChats\n      } = this.state;\n\n      if (isNewUsers) {\n        let newPChats = [...pChats];\n        let oldPChats = pChats.map(pChat => pChat.name);\n        user && Object.keys(newUsers).map(newUser => {\n          if (newUser !== user.nickname && !oldPChats.includes(newUser)) {\n            newPChats.push({\n              name: newUser,\n              description: 'direct message',\n              messages: [],\n              isTyping: false,\n              msgCount: 0,\n              type: 'Private'\n            });\n          }\n\n          return null;\n        });\n        this.setState({\n          users: newUsers,\n          pChats: newPChats\n        });\n      } else {\n        let newPChats = pChats.filter(pChat => pChat.name !== outUser);\n        this.setState({\n          users: newUsers,\n          pChats: newPChats\n        });\n      }\n    };\n\n    this.logout = () => {\n      let {\n        socket\n      } = this.state;\n      socket.emit(events.LOGOUT);\n      this.setState({\n        user: null\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.initSocket();\n  }\n\n  render() {\n    console.log(\"got here\");\n    let {\n      user,\n      users,\n      pChats,\n      socket\n    } = this.state;\n    return user ? /*#__PURE__*/_jsxDEV(ChatPage, {\n      user: user,\n      users: users,\n      pChats: pChats,\n      socket: socket,\n      logout: this.logout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(LoginPage, {\n      socket: socket,\n      setUser: this.setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Main;","map":{"version":3,"sources":["D:/Users/naomi/Downloads/web_react_project/frontend/src/components/ChatMain.js"],"names":["React","Component","io","events","ChatPage","LoginPage","socketUrl","Main","state","socket","user","users","pChats","initSocket","setState","on","console","log","LOGOUT","setUsers","NEW_USER","setUser","emit","isNewUsers","newUsers","outUser","newPChats","oldPChats","map","pChat","name","Object","keys","newUser","nickname","includes","push","description","messages","isTyping","msgCount","type","filter","logout","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport io from 'socket.io-client'\r\nimport events from '../events'\r\nimport ChatPage from './ChatsPage/ChatPage'\r\nimport LoginPage from './LoginPage'\r\n\r\n\r\n// ***** it will used in dev mode\r\n const socketUrl = 'http://localhost/'\r\n\r\nexport class Main extends Component {\r\n    state = {\r\n        socket: null,\r\n        user: null,\r\n        users: {},\r\n        pChats: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initSocket()\r\n    }\r\n\r\n    initSocket = () => {\r\n        let socket = io( socketUrl )\r\n        this.setState({ socket })\r\n        socket.on('connect', () => console.log( 'Connected'))\r\n        socket.on( events.LOGOUT, this.setUsers( false ))\r\n        socket.on( events.NEW_USER, this.setUsers( true ))\r\n    }\r\n\r\n    setUser = user => {\r\n        let { socket } = this.state\r\n        this.setState({ user })\r\n        socket.emit( events.NEW_USER, user )\r\n    }\r\n\r\n    setUsers = isNewUsers => ({ newUsers, outUser }) => {\r\n        let { user, pChats } = this.state\r\n        if( isNewUsers ){\r\n            let newPChats = [...pChats]\r\n            let oldPChats = pChats.map( pChat => pChat.name ) \r\n            user && Object.keys( newUsers ).map( newUser => {\r\n                if( newUser !== user.nickname && !oldPChats.includes( newUser )){\r\n                    newPChats.push({\r\n                        name: newUser,\r\n                        description: 'direct message',\r\n                        messages: [],\r\n                        isTyping: false,\r\n                        msgCount: 0,\r\n                        type: 'Private'\r\n                    })\r\n                }\r\n                return null\r\n            }) \r\n            this.setState({ users : newUsers, pChats: newPChats  })\r\n        } else {\r\n            let newPChats = pChats.filter( pChat => pChat.name !== outUser )\r\n            this.setState({ users: newUsers, pChats: newPChats })\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        let { socket } = this.state\r\n        socket.emit( events.LOGOUT )\r\n        this.setState({ user: null }) \r\n    }\r\n\r\n    render() { \r\n        console.log(\"got here\")\r\n        let { user, users, pChats, socket } = this.state\r\n        return (\r\n            user ? \r\n            <ChatPage \r\n                user = { user }\r\n                users = { users }\r\n                pChats = { pChats }\r\n                socket = { socket }\r\n                logout = { this.logout }\r\n            /> : \r\n            <LoginPage socket={socket} setUser={this.setUser} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}