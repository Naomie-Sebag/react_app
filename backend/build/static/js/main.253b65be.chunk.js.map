{"version":3,"sources":["stores/userStore.js","stores/InputField.js","stores/SubmitButton.js","App.js","stores/LogginForm.js","reportWebVitals.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","App","a","fetch","method","headers","res","json","result","success","userStore","isLoggedin","console","log","doLogout","observer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAmBe,MAZX,aAAc,oBACVA,YAAiBC,KAAM,CAEfC,SAAS,EACTC,YAAY,EACZC,SAAU,M,eCYXC,E,4JAjBb,WACC,IAAD,OACE,OACE,qBAAKC,UAAU,aAAf,SAEE,uBACIA,UAAU,QACVC,KAAMN,KAAKO,MAAMD,KACjBE,YAAaR,KAAKO,MAAMC,YACxBC,MAAOT,KAAKO,MAAME,MAClBC,SAAW,SAACC,GAAD,OAAO,EAAKJ,MAAMG,SAASC,EAAEC,OAAOH,gB,GAZlCI,IAAMC,WCoBhBC,E,4JAlBb,WACC,IAAD,OACE,OACE,qBAAKV,UAAU,eAAf,SAEE,wBACIA,UAAU,MACVW,SAAUhB,KAAKO,MAAMS,SACrBC,QAAS,kBAAM,EAAKV,MAAMU,WAH9B,SAMKjB,KAAKO,MAAMW,a,GAbGL,IAAMC,WCQ3BK,GCNkBN,IAAMC,U,oNDQ5B,8BAAAM,EAAA,+EAIoBC,MAAM,cAAe,CAEnCC,OAAQ,OACRC,QAAS,CACP,OAAW,mBACX,eAAiB,sBATzB,cAIQC,EAJR,gBAaqBA,EAAIC,OAbzB,QAaMC,EAbN,SAeeA,EAAOC,SAElBC,EAAU3B,SAAU,EACpB2B,EAAUC,YAAa,EACvBD,EAAUzB,SAAWuB,EAAOvB,WAK5ByB,EAAU3B,SAAU,EACpB2B,EAAUC,YAAa,GAzB3B,kDAkCAD,EAAU3B,SAAU,EACpB2B,EAAUC,YAAa,EAnCvB,0D,mHA2CF,8BAAAT,EAAA,+EAIoBC,MAAM,UAAW,CAE/BC,OAAQ,OACRC,QAAS,CACP,OAAW,mBACX,eAAiB,sBATzB,cAIQC,EAJR,gBAaqBA,EAAIC,OAbzB,QAaMC,EAbN,SAeeA,EAAOC,UAElBC,EAAUC,YAAa,EACvBD,EAAUzB,SAAW,IAlBzB,kDAyBA2B,QAAQC,IAAR,MAzBA,0D,0EAgCE,WACC,IAAD,OAEE,OAAGH,EAAU3B,QAET,qBAAKI,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,uCASDuB,EAAUC,WAGT,qBAAKxB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,qBACSuB,EAAUzB,SAEnB,cAAC,EAAD,CACAe,KAAM,UACNF,UAAU,EACVC,QAAU,kBAAM,EAAKe,mBAY3B,qBAAK3B,UAAU,MAAf,SACG,sBAAKA,UAAU,YAAf,UACK,cAAC,EAAD,CACIa,KAAM,UACNF,UAAU,EACVC,QAAU,kBAAM,EAAKe,cAG5B,uC,GA1HOnB,IAAMC,YAmITmB,cAASd,GEpITe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.253b65be.chunk.js","sourcesContent":["import { extendObservable} from 'mobx';\r\n\r\n/**\r\n * *UserStore\r\n */\r\n\r\nclass UserStore{\r\n    constructor(){\r\n        extendObservable(this, {\r\n\r\n                loading: true,\r\n                isLoggedIn: false,\r\n                username: ''\r\n\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","\r\nimport React from 'react';\r\n\r\n\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"inputField\">\r\n        \r\n        <input\r\n            className='input'        \r\n            type={this.props.type}\r\n            placeholder={this.props.placeholder}\r\n            value={this.props.value}\r\n            onChange={ (e) => this.props.onChange(e.target.value)}\r\n            />\r\n\r\n      </div>\r\n    );  \r\n  }\r\n}\r\nexport default InputField;\r\n","\r\nimport React from 'react';\r\n\r\n\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"submitButton\">\r\n        \r\n        <button \r\n            className='btn'\r\n            disabled={this.props.disabled}\r\n            onClick={() => this.props.onClick()}\r\n\r\n        >\r\n            {this.props.text}\r\n        </button>\r\n\r\n      </div>\r\n    );  \r\n  }\r\n}\r\nexport default SubmitButton;\r\n","import { observer } from 'mobx-react';\n\nimport userStore from './stores/userStore';\nimport LoginForm from './stores/LogginForm';\nimport InputField from './stores/InputField';\nimport SubmitButton from './stores/SubmitButton';\n\n\nimport './App.css';\nimport React from 'react';\n\n\n\nclass App extends React.Component {\n\n  async componentDidMount(){\n\n    try {\n\n      let res = await fetch('/isLoggedin', {\n\n        method: 'post',\n        headers: {\n          'Accept' : 'application/json',\n          'Content-type' : 'application/json'\n        }\n      });\n\n    let result = await res.json();\n\n    if(result && result.success) {\n\n      userStore.loading = false;\n      userStore.isLoggedin = true;\n      userStore.username = result.username;\n    }\n\n    else\n    {\n      userStore.loading = false;\n      userStore.isLoggedin = false;\n    }\n\n\n\n    }\n\ncatch(e) {\n\n  userStore.loading = false;\n  userStore.isLoggedin = false;\n  }\n\n}\n\n\n\n\nasync doLogout(){\n\n  try {\n\n    let res = await fetch('/logout', {\n\n      method: 'post',\n      headers: {\n        'Accept' : 'application/json',\n        'Content-Type' : 'application/json'\n      }\n    });\n\n  let result = await res.json();\n\n  if(result && result.success) {\n\n    userStore.isLoggedin = false;\n    userStore.username = '';\n  }\n\n  }\n\ncatch(e) {\n\nconsole.log(e)\n}\n\n}\n\n\n\n  render()\n  {\n\n    if(userStore.loading) {\n      return (\n        <div className='app'>\n          <div className='container'>\n          Loading, please wait...\n          </div>\n        </div>\n      );\n    }\n\n    else {\n\n      if(userStore.isLoggedin) {\n\n        return (\n          <div className='app'>\n            <div className='container'>\n            Welcome {userStore.username}\n\n            <SubmitButton\n            text={'log out'}\n            disabled={false}\n            onClick={ () => this.doLogout()}\n            \n            />\n\n            </div>\n          </div>\n        );\n     }\n      \n    }\n\n    return (\n      <div className=\"app\">\n         <div className='container'>\n              <SubmitButton\n                  text={'log out'}\n                  disabled={false}\n                  onClick={ () => this.doLogout()}\n                  \n                  />\n           <loginForm />\n           </div>\n      </div>\n    );  \n    }\n\n    \n}\n\nexport default observer(App);\n","\r\nimport React from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport userStore from './userStore';\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n\r\nconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        username: '',\r\n        password: '',\r\n        buttonDisabled: false\r\n    }\r\n}\r\n\r\n    setInputValue(property, val){\r\n        val = val.trim();\r\n        if(val.length > 12){\r\n            return;\r\n        }\r\n        this.setState({\r\n            [property]:val\r\n        })\r\n\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({\r\n            username: '',\r\n            passord:'',\r\n            buttonDisabled : false\r\n        })\r\n    }\r\n\r\n    async doLogin() {\r\n        if(!this.state.username){\r\n            return;\r\n        }\r\n        if(!this.state.password){\r\n        return;\r\n        }\r\n    \r\n\r\n    this.setState({\r\n        buttonDisabled: true\r\n    })\r\n\r\n    try {\r\n        let res = await fetch('/login', {\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            })\r\n            \r\n        });\r\n\r\n        let result = await res.json();\r\n        if (result && result.success) {\r\n            userStore.isloggedIn = true;\r\n            userStore.username = result.username;\r\n        }\r\n        else if (result && result.success === false) {\r\n            this.resetForm();\r\n            alert(result.msg);\r\n        }\r\n\r\n\r\n    }\r\n        catch(e) {\r\n           console.log(e);\r\n           this.resetForm();\r\n        }\r\n    }\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"loginForm\">\r\n        \r\n        Log in \r\n        <InputField\r\n            type='text'\r\n            placeholder='Username'\r\n            value={this.state.username ? this.state.username : ''}\r\n            onChange={ (val) => this.setInputValue('username', val) }\r\n        />\r\n        <InputField\r\n            type='password'\r\n            placeholder='Password'\r\n            value={this.state.username ? this.state.password : ''}\r\n            onChange={ (val) => this.setInputValue('password', val) }\r\n        />\r\n\r\n        <SubmitButton\r\n            text='Login'\r\n            disabled={this.state.buttonDisabled}\r\n            onClick= { () => this.doLogin() }\r\n        />\r\n\r\n      </div>\r\n    );  \r\n  }\r\n}\r\nexport default LoginForm;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}